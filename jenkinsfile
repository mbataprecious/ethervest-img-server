pipeline {
    agent {label 'my_node_1_label'}

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'which branch to build on')
      }

    environment{
        version = '2.3'
        db_name = 'sql'
    }

    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Hi') {
            steps {
                echo 'Hi this is precious'
            }
        }
        stage('trying jeninsfile'){
            steps{
                echo "this is running from github"
                echo '${env.db_name}'
                echo '${env.version}'
            }
        }
        stage('Git checkout'){
            steps{
                git branch: '$BRANCH_NAME', credentialsId: 'git-credentials', url: 'https://github.com/mbataprecious/ethervest-img-server.git'
                sh 'ls -lrt'
            }
        }
        stage('list files'){
            steps{
                sh '''
                ls -lrt
                pwd
                who
                '''
            }
        }

       stage('parameter'){
       when {
        expression{
            env.BRANCH_NAME=='main'
        }
       }
        steps{
            sh 'echo $BRANCH_NAME'
        }
       }

        stage('Ensure Node Installed') {
            steps {
                sh '''
                    if ! command -v node >/dev/null 2>&1; then
                      echo "Node.js not found. Installing with apt..."
                      sudo apt-get update
                      sudo apt-get install -y nodejs npm
                    else
                      echo "Node.js is already installed"
                      node -v
                      npm -v
                    fi
                '''
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm ci'
            }
        }

        stage('Build') {
            steps {
                sh 'npm run build || echo "No build step defined"'
            }
        }

        stage('Archive App') {
            steps {
                sh '''
                    mkdir -p archive-output
                    sudo apt-get install -y zip
                    rsync -av --progress ./ ./archive-output
                    cd archive-output
                    zip -r ../ethervest-img-server.zip ethervest-img-server
                '''
                archiveArtifacts artifacts: 'ethervest-img-server.zip', fingerprint: true
            }
        }

       stage('env variable'){
        environment{
            db_version = '5.6'
        }
        steps{
            echo "${env.db_version}"
            sh 'echo $db_version'
            script{
                print env.db_version
            }
        }
       }
    }
    post{
        always{
            echo "i will run always and say Hello"
        }
                success {
            echo 'Build and archive successful.'
        }
        failure {
            echo 'Build or archiving failed.'
        }
    }
}